[[{"l":"Introduction","p":["Introducing our cutting-edge Flutter ticket app powered by Web3 technology! With our app, you can create, manage, and participate in exciting events like never before. Whether you're organizing a concert, sports game, conference, or any other event, our app provides a seamless and secure platform for all your ticketing needs.","One of the key features of Tickript is the ability to create events with just a few taps. You can set up event details such as date, time, and ticket pricing, and our app will generate unique and verifiable tickets using blockchain technology. This ensures that your event tickets are tamper-proof and cannot be duplicated, providing enhanced security and trust.","Selling and transferring tickets has never been easier with Tickript. You can list your tickets for sale on the app's marketplace, where buyers can securely purchase tickets using cryptocurrency or other payment methods. Tickets can also be easily transferred to friends, family, or other users with just a few clicks, making it convenient and hassle-free to manage your tickets.","Tickript also supports auctions, allowing users to create ticket auctions and bid on tickets in a transparent and decentralized manner. The highest bidder wins the auction, and the tickets are automatically transferred to their digital wallet upon successful bid, ensuring a fair and efficient auction process.","With Tickript's QR code scanning feature, you can easily verify the authenticity of tickets at the event venue. Simply scan the QR code that is generated by the customer's Tickript, and Tickript will quickly validate the ticket's authenticity and check if it has been used before, preventing fraud and ensuring a smooth entry process.","In summary, Tickript provides a secure, transparent, and user-friendly solution for creating, managing, and participating in events. With features such as event creation, ticket sales and transfers, auctions, and QR code validation, Tickript revolutionizes the way tickets are bought, sold, and used, making event management a breeze. Join us and experience the future of ticketing!"]}],[{"l":"Introduction to Installation","p":["Tickript have been tested with Android emulators. We do not promise to work on any devices other than Androids. Also, if you are going to deploy our backend in your local machine, we all have used Windows machines (due to our lack of resources)."]}],[{"l":"Basic Installation"},{"l":"Prerequisites","p":["Prerequisites of basic installation parts are:","Node.js with CLI","Flutter","Android Emulator"]},{"l":"Deploying Backend on Your Local","p":["If you are not going to use our backend services that are deployed on online, you may want to look at this part. Other than that, you can skip into mobile part.","After installing node.js, go to project's root folder that you are cloned from GitHub.","After that, in command line, run:","Now, we have installed our dependencies, therefore we can run the backend. However, if you are getting any errors, you may want to install packages that throws the error by:","After that, create a file named .env in your root folder of the backend project. The environment file should have following variables:","After these steps, if you have nodemon in your machine, start the backend by:","If you do not have nodemon in your machine, use:"]},{"l":"Installing the Mobile Project","p":["Clone the mobile project from GitHub. Then, go to project's root folder and open an .env file. After opening it, change its content to:","Then, in the project directory, run:","If you do not face any error, open an Android Emulator and run project through your personal choices.","Add mumbai testnet into your Metamask's networks, and switch to it.","That is it! You have installed our development environment on your local machine."]}],[{"l":"Install with Docker","p":["If you have one of our docker files, use following steps to deploy your backend.","Clone the docker file.","Run docker:","After that, you can use http://YOUR_IPv4_ADDRESS:8080 as your backend."]}],[{"l":"Introduction to Modals","p":["Our modals are what we use in our Mongodb Atlas Database. We have created them with mongoose, however, in this section we will just describe what modals' variables are.","When we are inserting, deleting, updating a field in Mongodb, we always use modals. Therefore, they are important to understand."]}],[{"l":"Auction Modal","p":["When our auction contract is created, we realized that we need an auction id to send. Therefore, we have created this modal to just serve this specific need.","It has 2 fields:"]},{"l":"auctionId","p":["auctionId is a Number field and automatically generated by mongoose sequence."]},{"l":"eventId","p":["eventId is a Number field and is given to backend to match auction with events."]}],[{"l":"Category Modal","p":["Category modals represents categories in database. Even though they are constant now, we wanted the flexibility of adding categories to database.","Category modal have 2 fields:"]},{"l":"image","p":["image is a required string field. It is fed with an image URL."]},{"l":"name","p":["name is a required string field. It is category's name."]}],[{"l":"Event Modal","p":["Event modal used through creation of events, update of events processes. An event model has many fields, let's describe them."]},{"l":"owner","p":["owner field is a required string field. It is the public address of event creator"]},{"l":"coverImageURL","p":["coverImageURL field is a required string field. We generally use cloudinary links for cover images. It is the image when you click an event."]},{"l":"title","p":["title field is a required string field. It is the title when you click an event."]},{"l":"startDate","p":["startDate field is a required string field (not Date!)."]},{"l":"endDate","p":["endDate field is a required string field (not Date!)."]},{"l":"startTime","p":["startTime field is a required string field (not Date!)."]},{"l":"endTime","p":["endTime field is a required string field (not Date!)."]},{"l":"category","p":["category field is foreign key of category names. It is a required string field."]},{"l":"description","p":["description is a required string field."]},{"l":"integerId","p":["When we are creating event models, we wanted to have an integer id to send to chain. Since our contract doesn't work with string ids, we have created integerId field. This field is fed from an automatic sequence, therefore, you do not need to input it anywhere. The type of integerId is Number, and since it is automatically generated it is not required but always exists."]}],[{"l":"Ticket Modal","p":["Ticket modal is created to see if the ticket is checked but not used before. This is created because one could use a ticket many times before a event checker sent the ticket used information to chain.","It has 2 fields:"]},{"l":"tokenId","p":["tokenId is a required Number field, and generated by chain. After the tokenId generated by chain, we use that tokenId to feed this data. TokenIds are generated in minting process."]},{"l":"controllerAddress","p":["controllerAddress is a required string field. It shows who controlled the ticket, therefore it contains public address of the controller. We have created this field to erase data with 1 query."]}],[{"l":"User Modal","p":["Our user modal is used when a user logins with Metamask. Since we wanted to customize our users, we created such modal. The fields of user model will be described below."]},{"l":"publicAddress","p":["publicAddress is a required string field. It is user's public wallet address."]},{"l":"name","p":["name is a string field. Once an user logs in, the default name of the user is its public address. However, an user can change its name."]},{"l":"username","p":["name is a string field. Once an user logs in, the default username of the user is its public address. However, an user can change its username."]},{"l":"nonce","p":["nonce is a string field. It is set when user is created by uuid.v4() algorithm. We use that to authenticate user sometimes."]},{"l":"avatar","p":["avatar is a string field. It provides user's profile picture in terms of URLs."]}],[{"l":"Introduction to Pages","p":["In pages section, one will see every page of Tickript. The documents will explain what is the page's aim in this section. If you are more interested in how the program works, see Workflows.","The pages section will have two parts:","Main Pages","Subpages","In main pages, the documents explains the pages that is reachable from almost everywhere, however in the subpages one can see deeper pages to gain information about every page.","Our main aim to provide pages section is to give every user an opportunity to meet with Tickript."]}],[{"l":"Category Page","p":["Category pages are accessible through Home Page. With compared to other Main Pages, they are pretty simple. In a category page, there are title of the category, banner of the category and events under that category. Events are visible through horizontal event cards and when clicked redirects you to Event Page.","A Category Page looks like:"]}],[{"l":"Event Page","p":["Event page is an input-specific page. Therefore, it needs to be accessed through several ways:","With horizontal event card","With vertical event card","These event cards can be found in Home, Profile or in search section.","Event page is fed from event modal. To see what event modal looks like, see Event Modal.","Events are created with event creation process. Therefore, the event page is formed from actually event owner's inputs.","Event page has three forms: an ordinary user's view, checker's view, event owner's view. Ownership is automatically detected via states of mobile application, therefore the two forms are located in the same page.","An ordinary event page starts with picture of the event and title of it. They are located in the beginning of the page. The owner, the date and the description of the event follows the first part. These are all constant parts that does not change if an user is ordinary or event owner.","Then, there is a table in which minted tickets (available but not on sale), listed tickets (on sale), sold tickets (tickets that are listed once, and not on sale right now), on sale (tickets someone is selling after listed once). This part is not constant since event owner will see + button if they did not mint any tickets yet. One can see the difference between event owner's view and an ordinary user's view at the end of the page.","Then, the page has Your Ticket status section. This part shows tickets you own or you are selling. Via refreshing it, one can see newly bought tickets. If one has a ticket, the right arrow button appers. This button redirects user to My Tickets page.","After that, we have the name of tickets and description of it. The important part here is price of tickets (or sold out part) here. Also, one can buy or view auctions through this section.","An event owner will see floating actions button on the right bottom section. The action button with people redirect you to Add Event Checker Page.","The checker will see the floating button with qr code will redirect you to Scan Page instead of add event checker page.","Ordinary user view:","Event owner view: Expired event page:"]}],[{"l":"Home Page","p":["Home page is default screen of Tickript. The log-in state does not affect what home page looks like. It can be accessed by clicking bottom navigation bar's first icon. The home page looks like:","The usage of home page is pretty simple. It has two parts:","Categories","Events"]},{"l":"Categories","p":["Categories part of the home page has a horizontal slider which shows all the categories of Tickript. There is 6 categories and all of them are clickable. If one goes that category's page, the one will be able to see tickets under that category."]},{"l":"Events","p":["Events part of the home page is an vertical slider which shows some of the events that are created in Tickript. The vertical slider does not show all the events that exists in Tickript."]}],[{"l":"Profile Page","p":["The aim of ours when creating a profile page to give opportunity to both event managers and ordinary users. Event managers should have been able to create events, mint tickets and sell them starting from their profile pages. Also, they should have been able to see their created events. On the other hand, ordinary users should have been able to see their own tickets. Also, all users should be able to login into application.","Profile page is fed from Profile Modal.","To reach our aims, we have created the profile page with 3 different states:","Logged out state","Logged in state","Settings"]},{"l":"Logged Out State","p":["The aim of logged out state to give opportunity to end user to login with Metamask. Logged out state has pretty simple structure. It just has a button to login to app. To see how login works, see Workflows.","The logged out state can be seen below:"]},{"l":"Logged In State","p":["There are more than one reason why we created logged in state. First, users should be able to reach their profile settings. Secondly, event owners should be able to create new events. Thirdly, ordinary users should be able to see their tickets (because of hiearchy, also event owners).","In the picture below, we see that there is button which redirects the end user to settings state. Here, a little difference comes: even though there is my events section, an ordinary user cannot see it. One should be event owner to see the part of My Events.","In the picture below, one can see that there is Attending section. Attending section is visible to users who own any ticket. Please note that if you are event owner and listed new tickets, the tickets will not be here. The attending section has two parts: tickets that is not outdated (event's start date is not passed), and outdated tickets."]},{"l":"Settings State","p":["Settings state should be able to provide changing the username and changing the profile picture. When one is an event owner, profile picture and username makes sense since others see who is organizing the event. However, for an ordinary user these are not important.","In the picture below, we see a clickable picture and text box with which an user can change its name:"]}],[{"l":"Search Page","p":["Search page is a simple search page in which there exists a text box. When user enters an input that has 3 or more characters, it shows events with matching or partially names.","Without input it looks like:","With input \"pool\", it looks like:"]}],[{"l":"Add Event Checker Page","p":["Add event checker page is the most simple therefore the most obvious page of the application. It has 1 text box in which the event owner should enter a public address and a button that submits the public address to add it to event checker list.","That is how it looks like:"]}],[{"l":"Auctions Page","p":["Auctions Page is accessible through an event's page. In this page with section Tickets on auction, one may bid to other auctions that are created by other users or see its own auctions.","An ordinary auctions page looks like:"]}],[{"l":"Bidding Page","p":["In a bidding page, an user sees event's image, when the auction will end, the start price or current price of the auction, placing bid section and total bids for this ticket. One can reclaim all the bids it has done in the last section of this page.","An ordinary bidding page looks like:"]}],[{"i":"create-auction--auction-page","l":"Create Auction / Auction Page","p":["Create Auction / Auction page is accessed through My Tickets Page. It has two states: Creating Auction State and Active Auction state."]},{"l":"Creating Auction State","p":["Create Auction State is designed to give user a list of inputs which will help to create the auction. It's first input is price (in terms of MATIC), and the second is number of days auction will be up. After filling these, one can create its own auction. A Creating Auction State looks like:"]},{"l":"Auction State","p":["Auction state is a static state in which an user can stop the auction, see the current price and the end date of the auction. An Auction State looks like:"]}],[{"l":"Create Event Page","p":["Create Event Page is where whitelisted users can create their events. Since the page is basically a form, we can list its inputs as:","Image","Title","Category","Start & End Date","Start & End Time","Description.","The upload button opens user's documents to upload an image. On the other hand, category dropdown shows all categories that exist in Tickript.","After filling all these inputs, one can create event with confirm button.","An Create Event Page looks like:"]}],[{"l":"Create Tickets Page","p":["Create Tickets Page is a type of minting page. The page has the event's informations in the beginning. After that, the amount of tickets that will be created (minted) is inputted. Confirm button finishes the process of minting.","A Create Tickets Page looks like:"]}],[{"l":"My Tickets Page","p":["My tickets page has 2 main parts: tickets you own currently and tickets you are selling. However, in the tickets you own currently you may see the tickets that are in auction right now.","In the tickets you own part, you can click tickets and see a pop-up in which there is a button which redirects to QR Code Page. Also from this pop-up you can transfer your ticket, resell it and put it into auction. To see how they work, look at Usage.","In the tickets you are selling part, we see your tickets that are on sale. If you click one of them, you can stop it from selling it. If you stop sale all, you can stop saling of all.","Without popup, my tickets page looks like:","With popup of ticket clicked that is not on sale, it looks like:"]}],[{"l":"QR Code Page","p":["QR Code Page just includes a QR code to show event checkers. That is used when you want to enter an event.","One should not show its QR code to anyone, since it may result in others to use it.","An example of QR Code may look like:"]}],[{"l":"Resell Page","p":["Resell page is only visible when ticket is sold before or event owner stopped ticket's sale once. Resell Page is designed to sell multiple amounts of tickets since 1 ticket could be sold from My Tickets Page.","Resell page has two inputs: Quantity and Price. After entering these inputs one can confirm the action. With these inputs resell page looks like:"]}],[{"l":"Scan Page","p":["You can reach to scan page if and only if you are an event checker of that event. After opening the scan page, one will see a camera, which helps you to read QR codes and a button which changes state of ticket to used. After reading a QR code, even though if event checker did not press finish control, one will not be able to pass (creates an error popup).","An event checker can reach this page and click to Finish Control button anytime it wants.","An ordinary scan page looks like:"]}],[{"l":"Selling Page","p":["Selling page only is visible when tickets will be sold first time. Therefore, only an event owner is able to see this page, and all the tickets will be affected by this operation.","In selling page, there is 3 inputs: transfer count (including resells), commission from every transfer, and price of the ticket. Confirm button starts the sale.","A selling page looks like:"]}],[{"l":"Introduction","p":["Auction Mechanisms","Authentication","Bid, withdraw","Buying tickets","Create an event","Create tickets (Minting tickets)","Event Management","Every part contains just usage information and step-by-step introduction to that process. To see workflows, see Workflows.","Gating (Scanning QR codes and adding event checker)","In this part, you will see:","Our main aim of the usage part of the documentation is to help end users to use the app. The part does not contain any technical detail.","Reselling tickets","Sell tickets","Start, stop auction","Stop sale","Ticket Customer","Transfer"]}],[{"l":"Authentication","p":["In tickript, authentication is done through Profile Page. When user clicks profile page in bottom navigation bar, it will see login with Metamask button.","Prerequisite of this part is to install Metamask."]},{"l":"Login","p":["To login into tickript, click Login with Metamask. Then, it write your metamask password if asked. After that, you will see a connection request. Click connect button: After that, if everything works correctly you will prompted with Metamask Signature. We are requesting this sign to authenticate you in our backend. Click sign button: If you have followed steps correctly, you should be in Profile Page Logged in State"]},{"l":"Logout","p":["To logout from tickript, go to Profile Page. Then click logout button. That is it!"]},{"l":"Changing Profile Settings","p":["Click on to settings page in your Profile Page. Then, you can click onto your profile picture or username to change them. After that click Save button."]}],[{"l":"Creating an Event","p":["To create an event, you should own an event owner role. To obtain event owner role please contact us.","After you obtained event owner role, you will see a plus button in your Profile Page. Click it and you will see Create Event Page. You can fill the areas with your desired inputs.","After that click confirm button and you are done! Now, you own an event."]}],[{"l":"Creating Tickets","p":["To create tickets, you should have an existing event which is not expired (the start date did not pass). To see how you can create an event see Creating an Event.","To create tickets for your event, go to event page from your Profile Page via clicking the event's card in the My Events section. Then, you should be redirect to Event Page. Here, click (+) button that is under the Minted section.","Now, you are in Create Tickets Page. Enter the quantity of tickets you want to create and click on confirm button. Metamask will be opened, if your password is asked enter it. You will be prompted for a transaction, scroll down the transaction details and press confirm in the screen below: Now, we redirect you to Event Page. After 1-2 seconds, click refresh button or re-enter Event Page. You should be able too the quantity you entered under minted section!","Please note that you cannot create tickets several times, since we wanted to block any unusual activities that is done by event owners."]}],[{"l":"Selling Tickets","p":["If you have successfully created your tickets by Creating Tickets, now anytime you want you can sell them.","To sell your tickets, go to your Event's Page and click the (+) button under Listed section. You should be redirected to Selling Page.","In selling page, you have 3 inputs:"]},{"l":"Transfer Count","p":["If you want your tickets to be transferred or sold with a limit, enter the transfer count with your desire. However, if you do not want to enter a specific number, you can enter a big integer."]},{"l":"Commision","p":["It is how much you will get per sale of other users from these tickets."]},{"l":"Price","p":["Your price for the tickets."]},{"l":"Click Confirm Button","p":["After filling the required areas, click confirm button. Metamask will be opened, enter your password if asked. Then, there will be a transaction sign request, scroll down until you see the confirm button, and click it:","After a while, re-enter event page or refresh it. You should be able to see your all tickets are on sale right now!","Please note that it is one time process. Therefore, be careful while you are selecting commission or transfer rights."]}],[{"l":"Adding an Event Checker","p":["To be able to scan QR codes of a ticket for a specific event, the event owner should add the user into event checker list. Even event owner should add itself to list to be able to check tickets.","If you are an event checker, you will see a QR code button under right-bottom. If you do not see that, ask your event owner to add you as event checker.","As an event owner, to add event checker go to your Event Page. Then, click on the button with people in right-bottom. You will be redirected to Add Event Checker Page.","Enter the user's public address which you want to add ass event checker. Then click onto confirm button. Metamask will be opened, enter your password if asked. Then, you will be prompted with signing a transaction. Scroll until you see confirm button and click it:","You have successfully added an event checker. Now, your event checkers should be able to see QR code button under the event you own."]}],[{"i":"checking--scanning-tickets","l":"Checking & Scanning Tickets","p":["If you are an event checker, you should be able to scan QR codes of tickets.","To check tickets, go to Event Page you want to check. Then, you should be able to see QR Code sign under right-bottom. If you do not see it, ask your event owner to add you as event checker with Adding Event Checker process. Click on the button after you see it.","You will be redirect to Scan Page. Here hold your camera through a QR Code that is generated by us. If the user is not shown its ticket to any event checker before, you will see green pop-up which means the customer is safe to pass. If you see red pop-up, do not let the customer to pass since the ticket is already used or checked.","After you finish scanning, tou can click on Finish Control anytime you want. After clicking it, Metamask will be opened, if it asks for your password enter it. Then, you will be requested for signing a transaction, scroll until you see confirm button, then click it:","You can check as many tickets as you want!"]}],[{"i":"start--stop-auction","l":"Start & Stop Auction","p":["In Tickript, you can create auctions that will expire after day limit. If you are a ticket owner, go to My Tickets Page. Then, click on any ticket. After that, you will see Put up for Auction button, click on it. It will redirect you to Auction Page. Then, here you can enter the price and number of days auction will be up, after that click the button and Metamask will be opened. If it asks for your password, enter it. After that a popup will be opened, scroll until you see the confirm button and click it:"]},{"l":"Stopping the Auction","p":["After you have successfuly created you auction, you can stop it anytime you want. Go to My Tickets Page and click on the ticket whose auction will be stopped. Click to Put up for auction, you will be redirected to Auction Page. Then, click on stop auction. Metamask will be opened, if it asks for your password enter it. After that, a popup will appear, socroll down until you see the confirm button. Then click on the button:"]}],[{"i":"bidding--claiming","l":"Bidding & Claiming","p":["In every Auction Page(accessible through event page), there is a bidding option if the auction is now owned by you. To bid on the ticket, enter a price in the section of bidding and click on Place Bid button. Please note that your bid should be higher than the highest bid. After that, Metamask will be opened, and if it asks for your password enter it. Then, a popup will appear, scroll down until you see the confirm button an click it:"]},{"i":"claiming-withdrawing-previous-bids","l":"Claiming (Withdrawing) Previous Bids","p":["After you bid on an auction, if someone has higher bid than you or auction is ended, you should withdraw your bids back to get your money back. To do that go to Auction Page. There will be a section in which you are able to see your total bid. Click on the claim button, Metamask will be opened, if it asks for your password enter it. Then, a popup will appear, scroll down until you see the confirm button, and click it:","Congrats! You have finished Auctions section."]}],[{"l":"Buying Tickets","p":["To buy any ticket from an Event, go to Event's page. Then, scroll down until you see Buy button. If there is no such button, that means that event does not have any tickets that are on sale. Also, it can be seen in On Sale section.","Click on the Buy Button. Metamask will be opened, if it asks for your password, enter it. Then you will be asked to sign a transaction with a cost. Cost appers on the top of the transaction. If you have enough MATIC, scroll down until you see the confirm button and click it:","You have successfuly bought a ticket. You can see your tickets under My Tickets Page!"]}],[{"l":"Reselling a Ticket","p":["If you have a ticket and this ticket has transfer right, you can resell it. You can access reselling section through My Tickets Page. Click onto ticket you want to resell and enter a price in resell section. Then, click resell button.","Metamask will be opened, enter your password if asked. Then, you will be prompted for costless transaction sign, scroll down until you see the confirm button and click it:","Now, your ticket should be on sale."]}],[{"l":"Stopping a Sale","p":["To stop a sale, you should already have tickets that are on sale. There is two options: stop sale all or stop sale of 1 ticket. To obtain these options go to My Tickets Page. If you are going to stop sales of all tickets, click stop sale all, if you will stop sale of 1 ticket, click to a ticket and click stop sale.","Then, Metamask will be opened, if it asks for your password, enter it. After that, a costless transaction is prompted, scroll down until you see the confirm button. Click onto the confirm button:","You have successfuly stopped sale of your ticket. You can see your tickets under My Tickets Page!"]}],[{"l":"Transferring Tickets","p":["To transfer a ticket, you should own a ticket. If you are an event owner, please be careful that your ticket should not be on sale. Go to My Tickets Page. Click onto any ticket you want to transfer, and enter the public address of user the ticket will be transferred to. Then, click to transfer button.","Metamask will be opened, it it asks for your password, enter it. Then, you will be asked for signing a costless transaction, scroll until you see the confirm button, and click it:","You have successfuly transferred your ticket. Thet ticket is visible transferred public address' user under My Tickets Page!"]}],[{"l":"Introduction to Workflows","p":["Auction","Authentication","Backend","Category","Classes","Connection to backend","Contract","Event","General","In this part we will look at these:","Market","Middlewares","Mobile","Providers","Routes (APIs)","The main goal of Workflows part is to introduce operational and algorithmic part of Tickript. Mainly this part is for developers. Therefore, if you do not have any background about Software Engineering, see Usage.","The parts will provide general workflow, therefore they will not include any part of our codes.","Ticket","User","Utils"]}],[{"l":"Authentication Mechanism","p":["Our authentication mechanism has 2 parts: Authentication with Metamask and Authentication with JWT token."]},{"l":"Authentication with Metamask","p":["In the mobile part, we have created login button. Whenever a user clicks onto login button, we open Metamask with WalletConnect API. If user permits logging in, the user will pass to JWT Authorization part."]},{"l":"JWT Authorization","p":["Our JWT Authorization is based on the backend. When a user is logged into Metamask, the User Provider forces user to sign a Metamask request. Then, we send signature and nonce of the user to backend, and verify if the user is the authorized user. Backend responds with a JWT token, which is deposited in the User Provider of the mobile part.","If a backend service needs authentication, we send following code part in the header:","That is how we handle Authorization via our backend services."]}],[{"l":"General Structure"},{"l":"Backend","p":["Our backend works with node.js/express/mongodb stack. Mongodb databse is based on Mongodb Atlas Cloud Database, therefore its link is needed when deploying the backend. We used the service architecture, which means we have:","Routes","Middlewares","Also, since we wanted to use mongoose, we have implemented Model-View-Controller architecture, therefore, the backend works with Models.","In the backend, we use several packages to reach our aim. The most important packages and services we use are:","Express","Alchemy","ipfs-only-hash","Axios","Cloudinary","Mongoose","jsonwebtoken","uuid"]},{"l":"Mobile","p":["Our mobile application is written with Flutter. It has atomic-design architecture (mostly), which means we have divided our components into four groups:","atoms","molecules","organisms","pages","Also, to simplfy login processes, we have used Provider Structures.","While we are developing, we used following packages and services to reach our aim:","WalletConnect","Alchemy","urllauncher","qrcodescanner"]}],[{"l":"Transactions","p":["To prevent repeated explanations in the document, this part will explain how Tickript handles the transaction in the general structure.","Every transaction starts at the mobile application. The mobile application collects necessary inputs from the user to call the corresponding backend service. Then, it requests to backend service with correct format.","After that, backend service responses to mobile app with 2 different statements:","Valid","Error","Backend always encodes the datas with encodeABI() function of the contract, however, depending on the inputs the state changes.","If the inputs are valid and transaction is available to do, backend service sends following data structure to user:","The mobile application gains the transactionParameter and sends it to chain via using alchemy.sendTransaction() function. If the signature of user is needed, it is handled via Metamask Provider."]}],[{"l":"Authentication Middleware","p":["Tickript's authentication system in the Tickript's backend services are based on the Authentication Middleware. As General Authentication explains, the backend's authentication is handled with Json Web Tokens (JWTs).","In every service that needs authentication calls Authentication Middleware before it proceeds any other work.","The Authentication Middleware takes the token that is sent with header Authorization. Then, it proceeds sent token and checks whose token is sent. It finds it the database whose token it is and adds user's information to request according to User Modal."]}],[{"i":"authentication-route-auth","l":"Authentication Route (/auth)","p":["Authentication Service's aim is to provide a login system. It has only 1 useful endpoint called /login."]},{"i":"login","l":"/login","p":["The login endpoint has 2 paths:","User is already signed up","User that did not signed up","With looking session value of user, /login method decides the signed-up state of the user. If the user is signed up, it generates a JWT token and calls our contract's verifyEventOwner method to see if user is whitelisted. Then, it sends both information to user.","If user is not signed up, it requires 2 parameters: nonce and signature. Then, using nonce and signature, it re-generates user's public address and adds a user with that public address and nonce to MongoDb Atlas Database. After that, it verifies if user is whitelisted already. Then, it returns User Modal and whitelist information to the requesting user."]}],[{"i":"category-route-category","l":"Category Route (/category)","p":["Since categories are not changable by end-users, category services only consist getters for ordinary users. However an admin of Tickript can add an category. Other than that category services are not in touch with any contract methods."]},{"i":"get-get-all","l":"[GET] /get-all","p":["The /get-all service of category route gets all categories from the MongoDb Atlas database and returns them to the requesting user."]},{"i":"post-add","l":"[POST] /add","p":["The /add service is called by Tickript admins and takes 2 inputs at it's body according to Category Modal: image and name. After validating the inputs, it adds the category into MongoDb Atlas Database."]}],[{"i":"event-route-event","l":"Event Route (/event)","p":["Event Route is created to handle get, put, post and delete operations that are related to Events. Event Route uses both contract and MongoDb methods in it."]},{"i":"get-id","l":"[GET] /:id","p":["The /:id service of the Event Route returns the Event Modal that corresponds to queried id. After validating the query, it finds the event by id in the MongoDb Atlas Database and returns it to requesting user."]},{"i":"get-get-random-event","l":"[GET] /get-random-event","p":["The /get-random-event service of the Event Route returns the Event Modal which is a random event. It returns a single random event to requesting user."]},{"i":"get-minted-event-ticket-tokensintegerid","l":"[GET] /minted-event-ticket-tokens?:integerId","p":["The /minted-event-ticket-tokens service of the Event Route returns the Tickets that are created under given integerId of the Event. It calls .getEventTicketList method of our contract and returns the list of tickets under the event to requesting user."]},{"i":"post-create","l":"[POST] /create","p":["The /create service of the Event route creates a new Event according to Event Modal. It requires authentication. After validating authentication and inputs, it creates a new event in the MongoDb Atlas Database"]},{"i":"post-set-ticket-controller","l":"[POST] /set-ticket-controller","p":["The /set-ticket-controller service of the Event Route returns a transaction data to add new ticket controller to the event. It encodes the given publicAddress and eventID with our Minting Contract and returns transaction parameters as stated in Transactions. It requires authentication."]},{"i":"post-is-ticket-controller","l":"[POST] /is-ticket-controller","p":["The /is-ticket-controller service of the Event Route returns if the one is a ticket controller for corresponding event. It requires authentication. By calling our verifyTicketController method of Mint Contract, it checks if user with publicAddress is an Event Controller for the event with eventID."]}],[{"i":"market-route-market","l":"Market Route (/market)","p":["Market route is specifically created to work with Market Contract."]},{"i":"get-market-itemtokenid","l":"[GET] /market-item?:tokenId","p":["The /market-item service of the Market Route gets the item that is an element market contract by using tokenId query parameter via calling NFTItem method of our Market Contract. It returns data of that token to the requesting user."]},{"i":"get-market-items-alleventid","l":"[GET] /market-items-all?:eventId","p":["The /market-items-all service of the Market Route gets all the tickets which is in Market Block and has the eventId. It gets them via calling ListEventTicketAll method of our Market Contract and returns list of tickets to the requesting user."]},{"i":"get-transferable-idseventidpublicaddress","l":"[GET] /transferable-ids?:eventId&:publicAddress","p":["The /transferable-ids service of the Market Route return all the tickets that is transferrable under eventId and owned by publicAddress. It gets them via calling TransferableIds method of our MarketContract and returns them to requesting user."]},{"i":"post-transfer","l":"[POST] /transfer","p":["The /transfer service of the Market Route returns data for the Transfer transaction according to Transactions. It gets tokenId and a toAddr, which means which user you want to send the ticket, and returns transaction data by encoding with TransferTicket method of our Market Contract."]},{"i":"post-resell","l":"[POST] /resell","p":["The /resell service of the Market Route returns data for the Resell transaction according to Transactions. It gets tokenId and a price, returns transaction data by encoding with ResellTicket method of our Market Contract. Resell means selling a ticket at second or more time."]},{"i":"post-sell","l":"[POST] /sell","p":["The /sell service of the Market Route returns data for the Sell transaction according to Transactions. It gets price, eventId, amount and transactionRight returns tra transaction data by encoding with createMarketItem method of our Market Contract. It is called when a ticket will be sold first time."]},{"i":"post-stop-sale","l":"[POST] /stop-sale","p":["The /stop-sale service of the Market Route returns data for the Stop Sale transaction according to Transactions. It gets tokenId and a price, returns transaction data by encoding with StopTicketSale method of our Market Contract. It is called to stop sale of a single item."]},{"i":"post-stop-batch-sale","l":"[POST] /stop-batch-sale","p":["The /stop-batch-sale service of the Market Route returns data for the Stop Batch Sale transaction according to Transactions. It gets tokenIds, eventId and a price, returns transaction data by encoding with StopBatchSale method of our Market Contract. It is called to stop sale of all tokenIds under the event with eventId."]},{"i":"post-buy","l":"[POST] /buy","p":["The /buy service of the Market Route returns data for the Buy transaction according to Transactions. It gets tokenIds and a price, returns transaction data by encoding with ticketSale method of our Market Contract. It is called to buy tickets with tokenIds with the corresponding price."]}],[{"l":"Ticket Route","p":["Ticket Route is implemented to work on tasks that are mainly related to tickets. The Ticker Route does not use any specific modal, therefore, one may have little understanding during the documentation."]},{"i":"get-id","l":"[GET] /:id","p":["The /:id service's aim to get metadata of the ticket with tokenId id. It uses Alchemy's getNftMetadata function to provide requested ticket to the user."]},{"i":"post-mint","l":"[POST] /mint","p":["The /mint service's aim to prepare transaction paramaters for the mint transaction done in frontend. After input validations, it pins image to IPFS. Then, it pins other metadata with ipfs link again to IPFS. Then, with an IPFS link, it prepares the transasction data by calling encodeABI function of our Mint Contract."]},{"i":"post-is-ticket-checked","l":"[POST] /is-ticket-checked","p":["The /is-ticket-checket service's aim to give ticket's controller state to the controller. Firstly, it is an authenticated service. After authentication, it calls NFTItem function of our Market Contract, and looks at used value. If ticket is used, it returns true. Then, it checks if user is really a controller (authenticated one). If yes, it checks if QR code creator is the ticket owner by recovering personel signature from nonce and signature. If yes, it tries to find if the ticket is checked, if yes, it returns true, if no adds to database and returns true."]}],[{"l":"Metamask Provider"},{"i":"why-we-used-such-provider","l":"Why we used such provider?","p":["We wanted to centralize all metamask actions and the loginning to metamask system."]},{"l":"Variables"},{"l":"_uri","p":["It is a string variable which corresponds to chain's uri."]},{"l":"_session","p":["Current active session of Metamask login. default: null."]},{"l":"currentAddress","p":["Connected user's public address, string. default: empty string"]},{"l":"chainId","p":["Constant value equals to 80001 (Mumbai Testnet chain id)"]},{"l":"connector","p":["WalletConnect classed connector with meta variables"]},{"l":"Functions"},{"l":"loginUsingMetamask","p":["If the connector is not connected, it creates new session with .createSession function of connector. Then, chainId, currentAddress and _ session is updated with respect to session's value. Then it notifies all listeners of the provider to update with notifyListeners() function of flutter:provider package."]},{"l":"sign","p":["Used to get sign with respect to nonce. Creates list of strings to give sendCustomRequest function. Firstly, it calls launchUrl with converting session's uri with uri parse, then sends custom request with connector's sendCustomRequest function"]},{"l":"logout","p":["If connector is connected, kills session of connector and erases datas of variables. Then notifies listeners of Metamask Provider"]},{"l":"clear","p":["Clears all variables and notifies listeners."]},{"l":"init","p":["Binds SessionUpdate and Disconnect functions of connector to clear data with clear function."]},{"i":"where-it-is-used","l":"Where it is used?","p":["It is used in wrapper of the app, therefore all the components of the app listens Metamask Provider."]}],[{"l":"User Provider","p":["User Provider is used to login into backend after Metamask Provider done loginWithMetamask. It wraps all the components except Metamask Provider in the wrapper component."]},{"l":"Variables"},{"l":"token","p":["Token is a nullable string which is the JWT token of the user. Empty string if default."]},{"l":"user","p":["User classed object which contains user's data"]},{"l":"Functions"},{"l":"hasToken","p":["Checks if token is defined."]},{"l":"handleLogin","p":["If token is not defined, takes currentAddress from Metamask Provider, gets nonce from the backend, signs the nonce and calls login path of the backend. Gets token from the result and notifies all components under it."]},{"l":"handleUpdate","p":["If metamask provider is changed, gets the current nonce and notifies its listeners."]}],[{"l":"Contact Us","p":["We are group of 4 people:","Alper Arı","Sadi Gülbey","Gizem Fıçıcıoğlu","Ahmet Mihça Aydın","You can contact as via our sabanciuniv.edu email addresses:","alperari@sabanciuniv.edu","sadigulbey@sabanciuniv.edu","gizemf@sabanciuniv.edu","ahmetmihca@sabanciuniv.edu","You can contact us for any questions you have or for bug reports."]}]]